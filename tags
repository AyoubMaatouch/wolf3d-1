!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AQUA	srcs/cub3d.h	/^# define AQUA /;"	d
BLUE	srcs/cub3d.h	/^# define BLUE /;"	d
BROWN	srcs/cub3d.h	/^# define BROWN /;"	d
BUFFER_SIZE	libft/get_next_line.h	/^# define BUFFER_SIZE /;"	d
CC	libft/Makefile	/^CC = gcc -Wall -Wextra -Werror -c $(SRC) && ar rc $(NAME) *.o && ranlib $(NAME)$/;"	m
CUB3D_H	srcs/cub3d.h	/^# define CUB3D_H$/;"	d
FALSE	srcs/cub3d.h	/^# define FALSE	/;"	d
FOV_ANGLE	srcs/cub3d.h	/^# define FOV_ANGLE	/;"	d
GET_NEXT_LINE_H	libft/get_next_line.h	/^# define GET_NEXT_LINE_H$/;"	d
GOLD	srcs/cub3d.h	/^# define GOLD /;"	d
GREEN	srcs/cub3d.h	/^# define GREEN /;"	d
LIBFT_H	libft/libft.h	/^# define LIBFT_H$/;"	d
LINUX_DOWN_ARROW	srcs/cub3d.h	/^# define LINUX_DOWN_ARROW	/;"	d
LINUX_KEY_ESC	srcs/cub3d.h	/^# define LINUX_KEY_ESC /;"	d
LINUX_KEY_H	srcs/cub3d.h	/^# define LINUX_KEY_H	/;"	d
LINUX_KEY_J	srcs/cub3d.h	/^# define LINUX_KEY_J	/;"	d
LINUX_KEY_K	srcs/cub3d.h	/^# define LINUX_KEY_K	/;"	d
LINUX_KEY_L	srcs/cub3d.h	/^# define LINUX_KEY_L	/;"	d
LINUX_LEFT_ARROW	srcs/cub3d.h	/^# define LINUX_LEFT_ARROW	/;"	d
LINUX_RIGHT_ARROW	srcs/cub3d.h	/^# define LINUX_RIGHT_ARROW	/;"	d
LINUX_UP_ARROW	srcs/cub3d.h	/^# define LINUX_UP_ARROW	/;"	d
MAC_DOWN_ARROW	srcs/cub3d.h	/^# define MAC_DOWN_ARROW	/;"	d
MAC_KEY_A	srcs/cub3d.h	/^# define MAC_KEY_A	/;"	d
MAC_KEY_D	srcs/cub3d.h	/^# define MAC_KEY_D	/;"	d
MAC_KEY_ESC	srcs/cub3d.h	/^# define MAC_KEY_ESC	/;"	d
MAC_KEY_H	srcs/cub3d.h	/^# define MAC_KEY_H	/;"	d
MAC_KEY_J	srcs/cub3d.h	/^# define MAC_KEY_J	/;"	d
MAC_KEY_K	srcs/cub3d.h	/^# define MAC_KEY_K	/;"	d
MAC_KEY_L	srcs/cub3d.h	/^# define MAC_KEY_L	/;"	d
MAC_KEY_S	srcs/cub3d.h	/^# define MAC_KEY_S	/;"	d
MAC_KEY_W	srcs/cub3d.h	/^# define MAC_KEY_W	/;"	d
MAC_LEFT_ARROW	srcs/cub3d.h	/^# define MAC_LEFT_ARROW	/;"	d
MAC_RIGHT_ARROW	srcs/cub3d.h	/^# define MAC_RIGHT_ARROW	/;"	d
MAC_UP_ARROW	srcs/cub3d.h	/^# define MAC_UP_ARROW	/;"	d
MINIMAP_SCALE	srcs/cub3d.h	/^# define MINIMAP_SCALE	/;"	d
NAME	libft/Makefile	/^NAME = libft.a$/;"	m
ORANGE	srcs/cub3d.h	/^# define ORANGE	/;"	d
READ_FILE_H	srcs/read_file.h	/^# define READ_FILE_H$/;"	d
RED	srcs/cub3d.h	/^# define RED /;"	d
SKY	srcs/cub3d.h	/^# define SKY /;"	d
SRC	libft/Makefile	/^SRC = ft_atoi.c ft_bzero.c ft_calloc.c ft_isalnum.c ft_isalpha.c ft_isascii.c\\$/;"	m
TILE_SIZE	srcs/cub3d.h	/^# define TILE_SIZE	/;"	d
TRUE	srcs/cub3d.h	/^# define TRUE	/;"	d
VIOLET	srcs/cub3d.h	/^# define VIOLET	/;"	d
WHITE	srcs/cub3d.h	/^# define WHITE /;"	d
YELLOW	srcs/cub3d.h	/^# define YELLOW	/;"	d
addr	srcs/cub3d.h	/^	char	*addr;$/;"	m	struct:s_images
addr	srcs/cub3d.h	/^	int		*addr;$/;"	m	struct:s_texture
backword	libft/ft_strtrim.c	/^static int		backword(char const *backstr, char const *backset, int ending)$/;"	f	file:
bits_per_pixel	srcs/cub3d.h	/^	int		bits_per_pixel;$/;"	m	struct:s_images
bpp	srcs/cub3d.h	/^	int		bpp;$/;"	m	struct:s_texture
cast_all_rays	srcs/cast_all_rays.c	/^void	cast_all_rays(t_rays rays[])$/;"	f
cast_ray	srcs/cast_ray.c	/^void	cast_ray(t_rays *ray)$/;"	f
ceill	srcs/read_file.h	/^	int		ceill;$/;"	m	struct:s_data
direction	srcs/cub3d.h	/^	float	direction;$/;"	m	struct:s_player
distance	srcs/cub3d.h	/^	float	distance;$/;"	m	struct:s_ray
distance	srcs/cub3d.h	/^	float	distance;$/;"	m	struct:s_sprit
endian	srcs/cub3d.h	/^	int		endian;$/;"	m	struct:s_images
endian	srcs/cub3d.h	/^	int		endian;$/;"	m	struct:s_texture
file	srcs/cub3d.h	/^	char	*file;$/;"	m	struct:s_texture
floor	srcs/read_file.h	/^	int		floor;$/;"	m	struct:s_data
forword	libft/ft_strtrim.c	/^static int		forword(char const *forstr, char const *forset)$/;"	f	file:
ft_add_new_sprite	srcs/ft_add_new_sprite.c	/^t_sprit		*ft_add_new_sprite(int y, int x)$/;"	f
ft_addr_of_texture_img	srcs/ft_addr_of_texture_img.c	/^void	ft_addr_of_texture_img(void)$/;"	f
ft_atoi	libft/ft_atoi.c	/^int	ft_atoi(const char *str)$/;"	f
ft_bzero	libft/ft_bzero.c	/^void	ft_bzero(void *string, size_t n)$/;"	f
ft_calloc	libft/ft_calloc.c	/^void	*ft_calloc(size_t count, size_t size)$/;"	f
ft_check_data	srcs/ft_check_data.c	/^void	ft_check_data(void)$/;"	f
ft_check_map	srcs/ft_check_map.c	/^void	ft_check_map(void)$/;"	f
ft_check_map_line	srcs/ft_check_map_line.c	/^int	ft_check_map_line(char *str, int position)$/;"	f
ft_check_texture	srcs/ft_check_texture.c	/^void	ft_check_texture(void)$/;"	f
ft_check_texture_files	srcs/ft_check_texture_files.c	/^void	ft_check_texture_files(void)$/;"	f
ft_clc_sprit_dis	srcs/ft_clc_sprit_dis.c	/^void	ft_clc_sprit_dis(void)$/;"	f
ft_cos	srcs/ft_cos.c	/^double	ft_cos(double angle)$/;"	f
ft_distance	srcs/ft_distance.c	/^float	ft_distance(float x, float y)$/;"	f
ft_draw	srcs/ft_draw.c	/^void	ft_draw(void)$/;"	f
ft_draw_3d	srcs/ft_draw_3d.c	/^void	ft_draw_3d(t_images *img, t_rays ray[])$/;"	f
ft_file_error	srcs/ft_file_error.c	/^int	ft_file_error(void)$/;"	f
ft_file_extention	srcs/ft_file_extention.c	/^int	ft_file_extention(const char *filename)$/;"	f
ft_find_sprit_pos	srcs/ft_find_sprit_pos.c	/^void	ft_find_sprit_pos(void)$/;"	f
ft_free	libft/get_next_line.c	/^int	ft_free(char **ptr)$/;"	f
ft_free_double_ptr	libft/ft_free_double_ptr.c	/^void	ft_free_double_ptr(char ***str)$/;"	f
ft_from_newline	libft/get_next_line_utils.c	/^char	*ft_from_newline(char *string)$/;"	f
ft_init_data	srcs/ft_init_data.c	/^void	ft_init_data(void)$/;"	f
ft_init_p_view	srcs/ft_init_p_view.c	/^void	ft_init_p_view(void)$/;"	f
ft_is_all_line_one	srcs/ft_is_all_line_one.c	/^int	ft_is_all_line_one(char *line)$/;"	f
ft_is_sprit_visible	srcs/ft_is_sprit_visible.c	/^void	ft_is_sprit_visible()$/;"	f
ft_isalnum	libft/ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f
ft_isalpha	libft/ft_isalpha.c	/^int		ft_isalpha(int c)$/;"	f
ft_isascii	libft/ft_isascii.c	/^int	ft_isascii(int c)$/;"	f
ft_isdata_begin	srcs/ft_isdata_begin.c	/^int	ft_isdata_begin(char *line)$/;"	f
ft_isdigit	libft/ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f
ft_ismap_begin	srcs/ft_ismap_begin.c	/^int	ft_ismap_begin(char *line)$/;"	f
ft_isnothing	srcs/ft_isnothing.c	/^void	ft_isnothing(char *line)$/;"	f
ft_isprint	libft/ft_isprint.c	/^int	ft_isprint(int c)$/;"	f
ft_itoa	libft/ft_itoa.c	/^char		*ft_itoa(int n)$/;"	f
ft_join	libft/get_next_line_utils.c	/^char	*ft_join(char *string1, char *string2)$/;"	f
ft_loop	srcs/ft_loop.c	/^int	ft_loop(int l_key)$/;"	f
ft_map_error	srcs/ft_map_error.c	/^int	ft_map_error(void)$/;"	f
ft_memccpy	libft/ft_memccpy.c	/^void	*ft_memccpy(void *distination, const void *source, int c, size_t n)$/;"	f
ft_memchr	libft/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f
ft_memcmp	libft/ft_memcmp.c	/^int	ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f
ft_memcpy	libft/ft_memcpy.c	/^void	*ft_memcpy(void *distination, const void *source, size_t len)$/;"	f
ft_memmove	libft/ft_memmove.c	/^void		*ft_memmove(void *distination, const void *source, size_t lenth)$/;"	f
ft_memset	libft/ft_memset.c	/^void	*ft_memset(void *byte, int c, size_t len)$/;"	f
ft_my_errors	srcs/ft_my_errors.c	/^int	ft_my_errors(char *str)$/;"	f
ft_putchar_fd	libft/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f
ft_putendl_fd	libft/ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f
ft_putnbr_fd	libft/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f
ft_putstr	libft/ft_putstr.c	/^void	ft_putstr(char *s)$/;"	f
ft_putstr_fd	libft/ft_putstr_fd.c	/^void	ft_putstr_fd(char *s, int fd)$/;"	f
ft_ray_is_facing	srcs/ft_ray_is_facing.c	/^void	ft_ray_is_facing(t_rays *ray)$/;"	f
ft_red_bouton	srcs/ft_red_bouton.c	/^int		ft_red_bouton(int key)$/;"	f
ft_search	libft/get_next_line_utils.c	/^int		ft_search(char *source)$/;"	f
ft_setup	srcs/ft_setup.c	/^void	ft_setup(const char *file)$/;"	f
ft_sin	srcs/ft_sin.c	/^double	ft_sin(double angle)$/;"	f
ft_split	libft/ft_split.c	/^char			**ft_split(char const *s, char c)$/;"	f
ft_strchr	libft/ft_strchr.c	/^char	*ft_strchr(const char *src, int c)$/;"	f
ft_strdup	libft/ft_strdup.c	/^char	*ft_strdup(const char *string)$/;"	f
ft_strjoin	libft/ft_strjoin.c	/^char	*ft_strjoin(char const *string1, char const *string2)$/;"	f
ft_strlcat	libft/ft_strlcat.c	/^size_t	ft_strlcat(char *dst, const char *src, size_t size)$/;"	f
ft_strlcpy	libft/ft_strlcpy.c	/^size_t	ft_strlcpy(char *distination, const char *source, size_t size)$/;"	f
ft_strlen	libft/ft_strlen.c	/^size_t	ft_strlen(const char *str)$/;"	f
ft_strmapi	libft/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f
ft_strncmp	libft/ft_strncmp.c	/^int	ft_strncmp(const char *string1, const char *string2, size_t n)$/;"	f
ft_strnstr	libft/ft_strnstr.c	/^char	*ft_strnstr(const char *father, const char *son, size_t len)$/;"	f
ft_strrchr	libft/ft_strrchr.c	/^char	*ft_strrchr(const char *pointer_to_string, int c)$/;"	f
ft_strtrim	libft/ft_strtrim.c	/^char			*ft_strtrim(char const *string, char const *set)$/;"	f
ft_sub	libft/get_next_line_utils.c	/^char	*ft_sub(char *string)$/;"	f
ft_substr	libft/ft_substr.c	/^char	*ft_substr(char const *string, unsigned int start, size_t lenth)$/;"	f
ft_swap_sprit_conts	srcs/ft_swap_sprit_conts.c	/^void	ft_swap_sprit_conts(t_sprit *one, t_sprit *two)$/;"	f
ft_sys_error	srcs/ft_sys_error.c	/^int	ft_sys_error(char *str)$/;"	f
ft_take_map	srcs/ft_take_map.c	/^int	ft_take_map(char *filename, int map)$/;"	f
ft_tan	srcs/ft_tan.c	/^float	ft_tan(float l_angle)$/;"	f
ft_texture_error	srcs/ft_texture_error.c	/^int	ft_texture_error(char *str)$/;"	f
ft_tolower	libft/ft_tolower.c	/^int	ft_tolower(int c)$/;"	f
ft_toupper	libft/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f
ft_update	srcs/ft_update.c	/^void	ft_update(int l_key)$/;"	f
ft_update_player	srcs/ft_update_player.c	/^void	ft_update_player(void)$/;"	f
fun	libft/ft_split.c	/^static int		fun(char const *s, char c)$/;"	f	file:
g_data	srcs/read_file.h	/^}			g_data;$/;"	v	typeref:struct:s_data
g_player	srcs/cub3d.h	/^}			g_player;$/;"	v	typeref:struct:s_player
g_sprits_ptr	srcs/cub3d.h	/^t_sprit	*g_sprits_ptr;$/;"	v
g_txtr_e	srcs/cub3d.h	/^struct s_texture	g_txtr_e;$/;"	v	typeref:struct:s_texture
g_txtr_n	srcs/cub3d.h	/^struct s_texture	g_txtr_n;$/;"	v	typeref:struct:s_texture
g_txtr_s	srcs/cub3d.h	/^struct s_texture	g_txtr_s;$/;"	v	typeref:struct:s_texture
g_txtr_sprit	srcs/cub3d.h	/^struct s_texture	g_txtr_sprit;$/;"	v	typeref:struct:s_texture
g_txtr_w	srcs/cub3d.h	/^struct s_texture	g_txtr_w;$/;"	v	typeref:struct:s_texture
get_color	srcs/get_color.c	/^int		get_color(char *strim)$/;"	f
get_next_line	libft/get_next_line.c	/^int	get_next_line(int fd, char **line)$/;"	f
get_resolution	srcs/get_resolution.c	/^void	get_resolution(char *strim)$/;"	f
get_rgb	srcs/get_rgb.c	/^int	get_rgb(char *str)$/;"	f
get_texture	srcs/get_texture.c	/^char	*get_texture(char *strim)$/;"	f
has_wall_at	srcs/has_wall_at.c	/^int	has_wall_at(float x, float y)$/;"	f
height	srcs/cub3d.h	/^	int		height;$/;"	m	struct:s_texture
img	srcs/cub3d.h	/^	void	*img;$/;"	m	struct:s_images
img	srcs/cub3d.h	/^	void	*img;$/;"	m	struct:s_texture
is_rayfacing_down	srcs/cub3d.h	/^	int		is_rayfacing_down;$/;"	m	struct:s_ray
is_rayfacing_left	srcs/cub3d.h	/^	int		is_rayfacing_left;$/;"	m	struct:s_ray
is_rayfacing_right	srcs/cub3d.h	/^	int		is_rayfacing_right;$/;"	m	struct:s_ray
is_rayfacing_up	srcs/cub3d.h	/^	int		is_rayfacing_up;$/;"	m	struct:s_ray
lateral	srcs/cub3d.h	/^	int		lateral;$/;"	m	struct:s_player
len	libft/get_next_line_utils.c	/^size_t	len(char *str)$/;"	f
line_length	srcs/cub3d.h	/^	int		line_length;$/;"	m	struct:s_images
line_length	srcs/cub3d.h	/^	int		line_length;$/;"	m	struct:s_texture
main	srcs/main.c	/^int	main(int argc, char *argv[])$/;"	f
map_height	srcs/read_file.h	/^	int		map_height;$/;"	m	struct:s_data
map_ptr	srcs/read_file.h	/^	char	**map_ptr;$/;"	m	struct:s_data
map_width	srcs/read_file.h	/^	int		map_width;$/;"	m	struct:s_data
mini_scal	srcs/read_file.h	/^	float	mini_scal;$/;"	m	struct:s_data
mlx_ptr	srcs/read_file.h	/^	void	*mlx_ptr;$/;"	m	struct:s_data
mov_speed	srcs/cub3d.h	/^	float	mov_speed;$/;"	m	struct:s_player
my_mlx_pixel_put	srcs/my_mlx_pixel_put.c	/^void	my_mlx_pixel_put(t_images *img, int x, int y, int color)$/;"	f
my_pixel_get	srcs/my_pixel_get.c	/^int	my_pixel_get(int x, int y, int wich_txtr)$/;"	f
next	srcs/cub3d.h	/^	struct s_sprit *next;$/;"	m	struct:s_sprit	typeref:struct:s_sprit::s_sprit
player_view	srcs/read_file.h	/^	char	player_view;$/;"	m	struct:s_data
radius	srcs/cub3d.h	/^	float	radius;$/;"	m	struct:s_player
ray_angle	srcs/cub3d.h	/^	float	ray_angle;$/;"	m	struct:s_ray
read_file	srcs/read_file.c	/^void	read_file(const char *str)$/;"	f
read_map	srcs/read_map.c	/^void	read_map(int fd, int map, char *line, char *filename)$/;"	f
rotation	srcs/cub3d.h	/^	float	rotation;$/;"	m	struct:s_player
s_data	srcs/read_file.h	/^struct		s_data$/;"	s
s_images	srcs/cub3d.h	/^typedef	struct	s_images$/;"	s
s_player	srcs/cub3d.h	/^struct		s_player$/;"	s
s_ray	srcs/cub3d.h	/^typedef	struct	s_ray$/;"	s
s_sprit	srcs/cub3d.h	/^typedef	struct	s_sprit$/;"	s
s_texture	srcs/cub3d.h	/^struct			s_texture$/;"	s
selection	srcs/selection.c	/^void	selection(char *line)$/;"	f
t_images	srcs/cub3d.h	/^}				t_images;$/;"	t	typeref:struct:s_images
t_rays	srcs/cub3d.h	/^}				t_rays;$/;"	t	typeref:struct:s_ray
t_sprit	srcs/cub3d.h	/^}				t_sprit;$/;"	t	typeref:struct:s_sprit
texture_e	srcs/read_file.h	/^	char	*texture_e;$/;"	m	struct:s_data
texture_n	srcs/read_file.h	/^	char	*texture_n;$/;"	m	struct:s_data
texture_s	srcs/read_file.h	/^	char	*texture_s;$/;"	m	struct:s_data
texture_sprit	srcs/read_file.h	/^	char	*texture_sprit;$/;"	m	struct:s_data
texture_w	srcs/read_file.h	/^	char	*texture_w;$/;"	m	struct:s_data
thefillfun	libft/ft_split.c	/^static int		thefillfun(int x, char c, char **ptrsplit, char const *s)$/;"	f	file:
thefreefunction	libft/ft_split.c	/^static void		thefreefunction(char **ptr, int j)$/;"	f	file:
thefunlen	libft/ft_itoa.c	/^static int	thefunlen(unsigned int copy)$/;"	f	file:
turn	srcs/cub3d.h	/^	int		turn;$/;"	m	struct:s_player
vimmercopy	libft/ft_memmove.c	/^static void	*vimmercopy(void *distination2, const void *source2, size_t len)$/;"	f	file:
visible	srcs/cub3d.h	/^	int		visible;$/;"	m	struct:s_sprit
walk	srcs/cub3d.h	/^	int		walk;$/;"	m	struct:s_player
wall_content	srcs/cub3d.h	/^	int		wall_content;$/;"	m	struct:s_ray
wall_hitx	srcs/cub3d.h	/^	float	wall_hitx;$/;"	m	struct:s_ray
wall_hity	srcs/cub3d.h	/^	float	wall_hity;$/;"	m	struct:s_ray
was_hit_ver	srcs/cub3d.h	/^	int		was_hit_ver;$/;"	m	struct:s_ray
width	srcs/cub3d.h	/^	int		width;$/;"	m	struct:s_texture
win_height	srcs/read_file.h	/^	int		win_height;$/;"	m	struct:s_data
win_ptr	srcs/read_file.h	/^	void	*win_ptr;$/;"	m	struct:s_data
win_width	srcs/read_file.h	/^	int		win_width;$/;"	m	struct:s_data
x	srcs/cub3d.h	/^	float	x;$/;"	m	struct:s_player
x	srcs/cub3d.h	/^	float	x;$/;"	m	struct:s_sprit
y	srcs/cub3d.h	/^	float	y;$/;"	m	struct:s_player
y	srcs/cub3d.h	/^	float	y;$/;"	m	struct:s_sprit
